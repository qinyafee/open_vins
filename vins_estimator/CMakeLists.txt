# cmake_minimum_required(VERSION 2.8.3)
cmake_minimum_required(VERSION 3.1)
project(vins)

add_compile_options(-g  -ggdb)
#set(CMAKE_BUILD_TYPE "Release")
if (UNIX)
set(CMAKE_CXX_FLAGS "-std=c++11 -fPIC")
#-DEIGEN_USE_MKL_ALL")
set(CMAKE_CXX_FLAGS_RELEASE "-O3 -Wall -g")
endif()

# find_package(catkin REQUIRED COMPONENTS
#     roscpp
#     std_msgs
#     geometry_msgs
#     nav_msgs
#     tf
#     cv_bridge
#     camera_models
#     image_transport)

# find_package(camera_models REQUIRED)
find_package(OpenCV 3 REQUIRED)

# message(WARNING "OpenCV_VERSION: ${OpenCV_VERSION}")

find_package(Ceres REQUIRED)

# include_directories(src ${catkin_INCLUDE_DIRS} ${CERES_INCLUDE_DIRS})
message(WARNING "MANUALLY LINKING TO camera_models LIBRARY....")
include_directories(src ${CERES_INCLUDE_DIRS} ${camera_models_SOURCE_DIR}/include/)

set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)
find_package(Eigen3)
include_directories(
  # ${catkin_INCLUDE_DIRS}
  ${EIGEN3_INCLUDE_DIR}
)

# catkin_package()

add_library(vins_lib
    src/estimator/parameters.cpp
    src/estimator/estimator.cpp
    src/estimator/feature_manager.cpp
    src/factor/pose_local_parameterization.cpp
    src/factor/projectionTwoFrameOneCamFactor.cpp
    src/factor/projectionTwoFrameTwoCamFactor.cpp
    src/factor/projectionOneFrameTwoCamFactor.cpp
    src/factor/marginalization_factor.cpp
    src/utility/utility.cpp
    # src/utility/visualization.cpp
    # src/utility/CameraPoseVisualization.cpp
    src/initial/solve_5pts.cpp
    src/initial/initial_aligment.cpp
    src/initial/initial_sfm.cpp
    src/initial/initial_ex_rotation.cpp
    src/featureTracker/feature_tracker.cpp)
# target_link_libraries(vins_lib ${catkin_LIBRARIES} ${OpenCV_LIBS} ${CERES_LIBRARIES})
target_link_libraries(vins_lib ${OpenCV_LIBS} ${CERES_LIBRARIES} camera_models)
target_include_directories(vins_lib PUBLIC src)

# add_executable(vins_node src/rosNodeTest.cpp)
# target_link_libraries(vins_node vins_lib) 

# add_executable(kitti_odom_test src/KITTIOdomTest.cpp)
# target_link_libraries(kitti_odom_test vins_lib) 

# add_executable(kitti_gps_test src/KITTIGPSTest.cpp)
# target_link_libraries(kitti_gps_test vins_lib) 

